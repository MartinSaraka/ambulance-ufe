/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface Cv1sarakaAmbulanceWlApp {
        "ambulanceId": string;
        "apiBase": string;
        "basePath": string;
    }
    interface Cv1sarakaAmbulanceWlEditor {
        "entryId": string;
    }
    interface Cv1sarakaAmbulanceWlList {
        "ambulanceId": string;
        "apiBase": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface Cv1sarakaAmbulanceWlEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCv1sarakaAmbulanceWlEditorElement;
}
export interface Cv1sarakaAmbulanceWlListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCv1sarakaAmbulanceWlListElement;
}
declare global {
    interface HTMLCv1sarakaAmbulanceWlAppElement extends Components.Cv1sarakaAmbulanceWlApp, HTMLStencilElement {
    }
    var HTMLCv1sarakaAmbulanceWlAppElement: {
        prototype: HTMLCv1sarakaAmbulanceWlAppElement;
        new (): HTMLCv1sarakaAmbulanceWlAppElement;
    };
    interface HTMLCv1sarakaAmbulanceWlEditorElementEventMap {
        "editor-closed": string;
    }
    interface HTMLCv1sarakaAmbulanceWlEditorElement extends Components.Cv1sarakaAmbulanceWlEditor, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCv1sarakaAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLCv1sarakaAmbulanceWlEditorElement, ev: Cv1sarakaAmbulanceWlEditorCustomEvent<HTMLCv1sarakaAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCv1sarakaAmbulanceWlEditorElementEventMap>(type: K, listener: (this: HTMLCv1sarakaAmbulanceWlEditorElement, ev: Cv1sarakaAmbulanceWlEditorCustomEvent<HTMLCv1sarakaAmbulanceWlEditorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCv1sarakaAmbulanceWlEditorElement: {
        prototype: HTMLCv1sarakaAmbulanceWlEditorElement;
        new (): HTMLCv1sarakaAmbulanceWlEditorElement;
    };
    interface HTMLCv1sarakaAmbulanceWlListElementEventMap {
        "entry-clicked": string;
    }
    interface HTMLCv1sarakaAmbulanceWlListElement extends Components.Cv1sarakaAmbulanceWlList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLCv1sarakaAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLCv1sarakaAmbulanceWlListElement, ev: Cv1sarakaAmbulanceWlListCustomEvent<HTMLCv1sarakaAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLCv1sarakaAmbulanceWlListElementEventMap>(type: K, listener: (this: HTMLCv1sarakaAmbulanceWlListElement, ev: Cv1sarakaAmbulanceWlListCustomEvent<HTMLCv1sarakaAmbulanceWlListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLCv1sarakaAmbulanceWlListElement: {
        prototype: HTMLCv1sarakaAmbulanceWlListElement;
        new (): HTMLCv1sarakaAmbulanceWlListElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "cv1saraka-ambulance-wl-app": HTMLCv1sarakaAmbulanceWlAppElement;
        "cv1saraka-ambulance-wl-editor": HTMLCv1sarakaAmbulanceWlEditorElement;
        "cv1saraka-ambulance-wl-list": HTMLCv1sarakaAmbulanceWlListElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface Cv1sarakaAmbulanceWlApp {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "basePath"?: string;
    }
    interface Cv1sarakaAmbulanceWlEditor {
        "entryId"?: string;
        "onEditor-closed"?: (event: Cv1sarakaAmbulanceWlEditorCustomEvent<string>) => void;
    }
    interface Cv1sarakaAmbulanceWlList {
        "ambulanceId"?: string;
        "apiBase"?: string;
        "onEntry-clicked"?: (event: Cv1sarakaAmbulanceWlListCustomEvent<string>) => void;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "cv1saraka-ambulance-wl-app": Cv1sarakaAmbulanceWlApp;
        "cv1saraka-ambulance-wl-editor": Cv1sarakaAmbulanceWlEditor;
        "cv1saraka-ambulance-wl-list": Cv1sarakaAmbulanceWlList;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cv1saraka-ambulance-wl-app": LocalJSX.Cv1sarakaAmbulanceWlApp & JSXBase.HTMLAttributes<HTMLCv1sarakaAmbulanceWlAppElement>;
            "cv1saraka-ambulance-wl-editor": LocalJSX.Cv1sarakaAmbulanceWlEditor & JSXBase.HTMLAttributes<HTMLCv1sarakaAmbulanceWlEditorElement>;
            "cv1saraka-ambulance-wl-list": LocalJSX.Cv1sarakaAmbulanceWlList & JSXBase.HTMLAttributes<HTMLCv1sarakaAmbulanceWlListElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
